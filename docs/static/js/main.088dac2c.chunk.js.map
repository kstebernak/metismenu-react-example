{"version":3,"sources":["pages/SidebarNav.tsx","pages/Home.tsx","pages/About.tsx","pages/Contact.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["SidebarNav","Fragment","to","exact","className","href","target","rel","Home","About","toggle","subMenu","Contact","App","component","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kQA6BeA,G,MAxBI,WACjB,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,KACE,4BAAI,kBAAC,IAAD,CAASC,GAAG,IAAIC,OAAK,GAArB,SACF,4BACE,kBAAC,IAAD,CAAMD,GAAG,IAAIE,UAAU,aAAvB,eACA,4BACE,4BAAI,kBAAC,IAAD,CAASF,GAAG,UAAZ,UACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,YAAZ,cAGR,4BACE,kBAAC,IAAD,CAAMA,GAAG,IAAIE,UAAU,aAAvB,kBACA,4BACE,4BAAI,uBAAGC,KAAK,0CAA0CC,OAAO,SAASC,IAAI,uBAAtE,gBACJ,4BAAI,uBAAGF,KAAK,wCAAwCC,OAAO,SAASC,IAAI,uBAApE,2BCVHC,EATF,WACX,OACE,6BACE,oCACA,+CC+CSC,EAjDD,WACZ,OACE,6BACE,qCACA,0CACA,kBAAC,IAAD,CAAWC,QAAQ,EAAOC,QAAQ,OAChC,4BACE,kBAAC,IAAD,CAAMT,GAAG,IAAIE,UAAU,aAAvB,4BACA,6BACE,4BAAI,6BAAK,kEAIb,4BACE,kBAAC,IAAD,CAAMF,GAAG,IAAIE,UAAU,aAAvB,kCACA,6BACE,4BACA,6BAAK,+EAKT,4BACE,kBAAC,IAAD,CAAMF,GAAG,IAAIE,UAAU,aAAvB,qBACA,6BACE,4BACA,6BAAK,gFAOT,4BACE,kBAAC,IAAD,CAAMF,GAAG,IAAIE,UAAU,aAAvB,mCACA,6BACE,4BACA,6BAAK,mFC9BFQ,EATC,WACd,OACE,6BACE,uCACA,kD,MCoBSC,MAjBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKT,UAAU,OACb,2BAAOA,UAAU,WACf,kBAAC,EAAD,OAEF,yBAAKA,UAAU,WACb,kBAAC,IAAD,CAAOU,UAAWN,EAAMO,KAAK,IAAIZ,OAAK,IACtC,kBAAC,IAAD,CAAOW,UAAWL,EAAOM,KAAK,WAC9B,kBAAC,IAAD,CAAOD,UAAWF,EAASG,KAAK,iBCPtBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.088dac2c.chunk.js","sourcesContent":["import React from 'react'\nimport { Link, NavLink } from 'react-router-dom'\nimport MetisMenu from '@metismenu/react';\nimport 'metismenujs/dist/metismenujs.css';\n\nconst SidebarNav = () => {\n  return (\n    <React.Fragment>\n      <MetisMenu>\n        <li><NavLink to=\"/\" exact>Home</NavLink></li>\n          <li>\n            <Link to=\"#\" className=\"has-arrow\">Other Pages</Link>\n            <ul>\n              <li><NavLink to=\"/about\">About</NavLink></li>\n              <li><NavLink to=\"/contact\">Contact</NavLink></li>\n            </ul>\n          </li>\n          <li>\n            <Link to=\"#\" className=\"has-arrow\">External Pages</Link>\n            <ul>\n              <li><a href=\"https://github.com/onokumus/metismenujs\" target=\"_blank\" rel=\"noopener noreferrer\">metismenujs</a></li>\n              <li><a href=\"https://github.com/onokumus/metismenu\" target=\"_blank\" rel=\"noopener noreferrer\">metismenu jquery</a></li>\n            </ul>\n          </li>\n      </MetisMenu>\n    </React.Fragment>\n  )\n}\n\nexport default SidebarNav\n","import React from 'react'\n\nconst Home = () => {\n  return (\n    <div>\n      <h3>Home</h3>\n      <p>home paragraph</p>\n    </div>\n  )\n}\n\nexport default Home\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MetisMenu from '@metismenu/react';\n\nconst About = () => {\n  return (\n    <div>\n      <h4>About</h4>\n      <p>How to use?</p>\n      <MetisMenu toggle={false} subMenu=\"nav\">\n        <li>\n          <Link to=\"#\" className=\"has-arrow\">Install @metismenu/react</Link>\n          <nav>\n            <li><pre><code>npm install @metismenu/react</code></pre></li>\n          </nav>\n        </li>\n        \n        <li>\n          <Link to=\"#\" className=\"has-arrow\">Add @metismenu/react Component</Link>\n          <nav>\n            <li>\n            <pre><code>import MetisMenu from '@metismenu/react';</code></pre>\n            </li>\n          </nav>\n        </li>\n\n        <li>\n          <Link to=\"#\" className=\"has-arrow\">Add MetisMenu CSS</Link>\n          <nav>\n            <li>\n            <pre><code>import 'metismenujs/dist/metismenujs.css';</code></pre>\n            </li>\n          </nav>\n        </li>\n        \n        \n        \n        <li>\n          <Link to=\"#\" className=\"has-arrow\">Call @metismenu/react Component</Link>\n          <nav>\n            <li>\n            <pre><code>\n            &#x3c;MetisMenu&#x20;&#x74;&#x6f;&#x67;&#x67;&#x6c;&#x65;&#x3d;&#x7b;&#x74;&#x72;&#x75;&#x65;&#x7d;&#x3e;&#xa;&#xa;&#xa; ... &#x3c;&#x2f;MetisMenu&#x3e;\n            </code></pre>\n            </li>\n          </nav>\n        </li>\n          \n      </MetisMenu>\n    </div>\n  )\n}\n\nexport default About\n","import React from 'react'\n\nconst Contact = () => {\n  return (\n    <div>\n      <h4>Contact</h4>\n      <p>contact paragraph</p>\n    </div>\n  )\n}\n\nexport default Contact\n","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport SidebarNav from './pages/SidebarNav';\nimport Home from './pages/Home';\nimport About from './pages/About';\nimport Contact from './pages/Contact';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"app\">\n        <aside className=\"sidebar\">\n          <SidebarNav />\n        </aside>\n        <div className=\"content\">\n          <Route component={Home} path=\"/\" exact />\n          <Route component={About} path=\"/about\" />\n          <Route component={Contact} path=\"/contact\" />\n        </div>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}